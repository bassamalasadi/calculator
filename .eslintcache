[{"C:\\Users\\bassa\\portfolio\\calculator\\src\\index.js":"1","C:\\Users\\bassa\\portfolio\\calculator\\src\\App.js":"2","C:\\Users\\bassa\\portfolio\\calculator\\src\\spacef.js":"3"},{"size":221,"mtime":1607238766006,"results":"4","hashOfConfig":"5"},{"size":8741,"mtime":1607584921802,"results":"6","hashOfConfig":"5"},{"size":712,"mtime":1607331702768,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ue803s",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bassa\\portfolio\\calculator\\src\\index.js",[],["16","17"],"C:\\Users\\bassa\\portfolio\\calculator\\src\\App.js",["18"],"import React, {memo, useState} from 'react'\nimport spacef from './spacef'\nimport './App.css';\n\nfunction App() {\n  const [value , setValue] = useState(\"0\")\n  const [memory, setMemory] = useState(null);\n  const [operator, setOperator] = useState(null);\n  const [mem , setMem] = useState(null)\n\n  let mrStyle = {}\n  if(mem !== null){\n    mrStyle = {\n      backgroundColor: \"#666666\"\n    }\n  }\n  const handleButtonPress = (content) => {\n    if(content === \"mr\"){\n      if(mem !== null){\n        setValue((mem).toString())\n        return;\n      }\n    }\n    if(content === \"AC\"){\n      setValue(\"0\");\n      setMemory(null);\n      setOperator(null);\n      return;\n    }\n\n    if (content === \".\") {\n      if (value.includes(\".\")) return;\n      setValue(value + \".\");\n      return;\n    }\n\n    if (content === \"+\" || content === \"−\" || content === \"x\" ||\n        content === \"÷\" || content === \"xy\" || content === \"sqrX\" ||\n        content === \"EE\" ) {\n      if (operator !== null) {\n        if (operator === \"+\") {\n          setMemory(memory + parseFloat(value));\n        } else if (operator === \"−\") {\n          setMemory(memory - parseFloat(value));\n        } else if (operator === \"x\") {\n          setMemory(memory * parseFloat(value));\n        } else if (operator === \"÷\") {\n          setMemory(memory / parseFloat(value));\n        } else if (operator === \"xy\"){\n          setMemory(memory ** parseFloat(value));\n        } else if (operator === \"sqrX\"){\n          setMemory(memory ** (1 / parseFloat(value)));\n        } else if (operator === \"EE\"){\n          setMemory(memory * (10 ** parseFloat(value)));\n        } else if(operator === \"m+\"){\n          setMem(mem + parseFloat(value));setValue('0');\n        } else if(operator === \"m-\"){\n          setMem(mem - parseFloat(value).toString())\n        }\n      } else {\n        setMemory(parseFloat(value));\n      }\n\n      setValue(\"0\");\n      setOperator(content);\n      return;\n    }\n\n    if (content === \"=\") {\n      if (!operator) return;\n      if (operator === \"+\") {\n        setValue((memory + parseFloat(value)).toString());\n      } else if (operator === \"−\") {\n        setValue((memory - parseFloat(value)).toString());\n      } else if (operator === \"x\") {\n        setValue((memory * parseFloat(value)).toString());\n      } else if (operator === \"÷\") {\n        setValue((memory / parseFloat(value)).toString());\n      } else if(operator === \"xy\"){\n        setValue((memory ** parseFloat(value).toString()))\n      } else if(operator === \"sqrX\"){\n        setValue((Math.pow(memory, (1/parseFloat(value)).toString())))\n      } else if(operator === \"EE\"){\n        setValue(memory * (10 ** parseFloat(value)).toString())\n      } else \n      setMemory(null);\n      setOperator(null);\n      return;\n    }\n\n    if (value[value.length - 1] === \".\") {\n      setValue(value + content);\n    } else if(value?.includes('.')){\n      setValue((value + content).toString())\n    }else{\n      setValue(parseFloat(value + content).toString());\n    }\n    if(content === \"\")return;\n    }\n\n  return (\n    <div className=\"App\">\n      <div className=\"calcultor\">\n        <div className=\"number\">\n          <p>{spacef(value)}</p>\n        </div>\n        <div className=\"numbers\">\n          <div  className=\"line\">\n          <button className=\"gray2Color\" >(</button>    \n          <button className=\"gray2Color\" >)</button>    \n          <button className=\"gray2Color\" onClick={() => {setValue('0');setMem(null)}}>mc</button>     \n          <button className=\"gray2Color\" onClick={() => {setMem(mem + Number(value));setValue('0')}}>m+</button>       \n          <button className=\"gray2Color\" onClick={() => {setMem(mem - Number(value));setValue('0')}}>m-</button>     \n          <button className=\"gray2Color\" style={mrStyle} onClick={() => handleButtonPress('mr')}>mr</button>    \n          <button className=\"grayColor\" onClick={() => handleButtonPress('AC')}>AC</button>                           \n          <button className=\"grayColor\" onClick={() => setValue((parseFloat(value) * -1).toString())}>±</button>      \n          <button className=\"grayColor\" onClick={() => setValue((parseFloat(value) / 100).toString())}>%</button>     \n          <button className=\"yellowColor\" onClick={() => handleButtonPress('÷')}>÷</button>                           \n          </div>\n          <div className=\"line\">\n          <button className=\"gray2Color\">2<sup>nd</sup></button>                                                    \n          <button className=\"gray2Color\" onClick={() => setValue(value ** 2)}>x<sup>2</sup></button>  \n          <button className=\"gray2Color\" onClick={() => setValue(value ** 3)}>x<sup>3</sup></button>  \n          <button className=\"gray2Color\" onClick={() => handleButtonPress('xy')}>x<sup>y</sup></button>       \n          <button className=\"gray2Color\" onClick={() => setValue(Math.exp(value))}>e<sup>x</sup></button>     \n          <button className=\"gray2Color\" onClick={() => setValue(10 ** value)}>10<sup>x</sup></button>\n          <button className=\"gray1Color\" onClick={() => handleButtonPress('7')}>7</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('8')}>8</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('9')}>9</button>            \n          <button className=\"yellowColor\" onClick={() => handleButtonPress('x')}>x</button>           \n          </div>\n          <div className=\"line\">\n          <button className=\"gray2Color\" onClick={() => setValue(1 / value)}>1/x</button>             \n          <button className=\"gray2Color\" onClick={() => setValue(Math.sqrt(value))}><sup>2</sup> &radic;<span style={{textDecoration: \"overline\"}}>x</span></button>\n          <button className=\"gray2Color\" onClick={() => setValue(Math.cbrt(value))}><sup>3</sup> &radic;<span style={{textDecoration: \"overline\"}}>x</span></button>\n          <button className=\"gray2Color\" onClick={() => handleButtonPress('sqrX')}><sup>y</sup> &radic;<span style={{textDecoration: \"overline\"}}>x</span></button>\n          <button className=\"gray2Color\" onClick={() => setValue(Math.log(value))}>In</button>        \n          <button className=\"gray2Color\" onClick={() => setValue(Math.log10(value))}>Iog<sup>10</sup></button>\n          <button className=\"gray1Color\" onClick={() => handleButtonPress('4')}>4</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('5')}>5</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('6')}>6</button>            \n          <button className=\"yellowColor\" onClick={() => handleButtonPress('−')}>−</button>           \n          </div>\n          <div className=\"line\">\n          <button className=\"gray2Color\">x!</button>                   \n          <button className=\"gray2Color\" onClick={() => setValue(Math.sin(value))}>sin</button>       \n          <button className=\"gray2Color\" onClick={() => setValue(Math.cos(value))}>cos</button>       \n          <button className=\"gray2Color\" onClick={() => setValue(Math.tan(value))}>tan</button>       \n          <button className=\"gray2Color\" onClick={() => setValue(Math.E)}>e</button>                  \n          <button className=\"gray2Color\" onClick={() => handleButtonPress('EE')}>EE</button>          \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('1')}>1</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('2')}>2</button>            \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('3')}>3</button>            \n          <button className=\"yellowColor\" onClick={() => handleButtonPress('+')}>+</button>           \n          </div>\n          <div className=\"line\">\n          <button className=\"gray2Color\">Rad</button>\n          <button className=\"gray2Color\" onClick={() => setValue(Math.sinh(value))}>sinh</button>     \n          <button className=\"gray2Color\" onClick={() => setValue(Math.cosh(value))}>cosh</button>     \n          <button className=\"gray2Color\" onClick={() => setValue(Math.tanh(value))}>tanh</button>     \n          <button className=\"gray2Color\" onClick={() => setValue(Math.PI)}>&pi;</button>              \n          <button className=\"gray2Color\" onClick={() => setValue(Math.random())}>Rand</button>        \n          <button className=\"gray1Color zero\" onClick={() => handleButtonPress('0')}>0</button>       \n          <button className=\"gray1Color\" onClick={() => handleButtonPress('.')}>.</button>            \n          <button className=\"yellowColor\" onClick={() => handleButtonPress('=')}>=</button>           \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\bassa\\portfolio\\calculator\\src\\spacef.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":1,"column":16,"nodeType":"25","messageId":"26","endLine":1,"endColumn":20},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'memo' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]